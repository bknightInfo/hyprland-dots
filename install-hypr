#!/bin/bash

# set some colors
CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="$(tput setaf 6)[ATTENTION]$(tput sgr0)"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"

INSTLOG="postinstall-$(date +%d-%H%M%S).log"

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Define the software that would be installed
#system packages
install_stage=(
	bluez
	bluez-utils
	blueman
	cliphist
	cronie
	duf
 	gcc12
	grim
	gtk3
	gvfs
	kitty
	hyprland
	mako
	network-manager-applet
	os-prober
	pacman-contrib
	pamixer
	pipewire
	reflector
	pavucontrol
	python-gobject
	rsync
	slurp
	unzip
	wget
	wireplumber
	wl-clipboard
	wofi
	xdg-user-dirs
	xdg-desktop-portal-hyprland
	xfce4-settings
)

misc_stage=(
	htop
	capitaine-cursors
	exa
	flatpak
	thunar
	polkit-gnome
	foot
	fzf
	gnome-keyring
	starship
	swayidle
	neofetch
	zsh
	zsh-completions
	zsh-syntax-highlighting
)

aur_stage=(
	fnm-bin
	grimblast
	sddm-git
	swaync
	swaylock-effects
	swww
	waybar-hyprland-git
	zsh-autocomplete-git
	tk
)

remove_stage=(
	xdg-desktop-portal-gnome
	xdg-desktop-portal-gtk
)

development_stage=(
	compose
	phpactor
	neovim
	npm
	vscodium-bin
	vscodium-bin-marketplace
)

# feel free to add more flatpaks.
flatpak_stage=(
	com.brave.Browser
	com.github.tchx84.Flatseal
	io.github.celluloid_player.Celluloid
	org.mozilla.firefox
	org.gnome.FileRoller
	org.gnome.Loupe
	org.libreoffice.LibreOffice
)

aur_applications=(
	cava-git
	noto-fonts
	noto-fonts-cjk
	noto-fonts-emoji
	noto-fonts-extra
	sddm-config-editor-git
	solaar
	spotify-edge
	playerctl
)

#My top 5 favorate nerd fonts
nerd_fonts=(
	CascadiaCode
	FiraCode
	JetBrainsMono
	Meslo
	Mononoki
)

for str in ${myArray[@]}; do
	echo $str
done

# clear the screen
clear

#### Check for package manager ####
ISAUR=$(command -v paru)

if [ -z "$ISAUR" ]; then
	echo -e "$CWR - Installing Paru"
	git clone https://aur.archlinux.org/paru-bin.git &>>$INSTLOG
	cd paru-bin &>>$INSTLOG
	makepkg -si --noconfirm &>>$INSTLOG
	cd $SCRIPT_DIR
	rm -rf paru-bin &>>$INSTLOG
	echo -e "$COK - Paru installed."
fi
AUR="paru"

# function that will test for a package and if not found it will attempt to install it
install_software() {
	case $1 in
	pacman)
		APP="sudo pacman"
		;;
	paru)
		APP="paru"
		;;
	esac
	if $APP -Q $2 &>>/dev/null; then
		echo -e "$COK - $2 is already installed."
	else
		# no package found so installing
		echo -e "$CNT - Now installing $2 ..."
		$APP -S --noconfirm $2 &>>$INSTLOG
		# test to make sure package installed
		if $APP -Q $2 &>>/dev/null; then
			echo -e "\e[1A\e[K$COK - $2 was installed."
		else
			# if this is hit then a package is missing, exit to review log
			echo -e "$CER - $2 install had failed, please check the install.log"
			exit
		fi
	fi
}

#remove unwanted applications
remove_software() {
	if $APP -Q $1 &>>/dev/null; then
		su vscodium-bin
		vscodium-bin-marketplacedo pacman -Rcns --noconfirm $1 &>>$INSTLOG
		echo -e "$COK - $1 removed."
	fi
}

### Install all of the above pacakges ####
read -n1 -rep "${CAT} - Would you like to install the packages? (y,n) " INST
if [[ $INST == "Y" || $INST == "y" ]]; then
	# Stage 1 - main components
	echo -e "$CNT - Installing main components, this may take a while..."
	for SOFTWR in ${install_stage[@]}; do
		install_software "pacman" $SOFTWR
	done

	# Stage 1 - main applications
	echo -e "$CNT - Installing misc applications, this may take a while..."
	for SOFTWR in ${misc_stage[@]}; do
		install_software "pacman" $SOFTWR
	done

	#fix needed for waybar-hyprland
	export CC=gcc-12 CXX=g++-12
	sudo pacman -R spdlog
	paru -S spdlog-git

	# Stage AUR - AUR applications
	echo -e "$CNT - Installing AUR system tools, this may take a while..."
	for SOFTWR in ${aur_stage[@]}; do
		install_software $AUR $SOFTWR
	done

	# Stage AUR - AUR applications
	echo -e "$CNT - Installing AUR applications, this may take a while..."
	for SOFTWR in ${aur_applications[@]}; do
		install_software $AUR $SOFTWR
	done

	# clean up files
	echo -e "$CNT - removing unwanted applications"
	for SOFTWR in ${remove_stage[@]}; do
		remove_software $SOFTWR
	done

	# Add flathub repo
	flatpak --user remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo &>>$INSTLOGpa

	# Stage flatpak
	echo -e "$CNT - installing flatpak applications"
	for SOFTWR in ${flatpak_stage[@]}; do
		flatpak install flathub -y $SOFTWR
	done

	# Enable the sddm login manager service
	echo -e "$CNT - Activating sddm Service..."
	sudo systemctl enable sddm -f &>>$INSTLOG
	sleep 2

	# Enable the Bluetooth service
	echo -e "$CNT - Activating Bluetooth Services...\n"
	sudo systemctl enable --now bluetooth.service &>>$INSTLOG
	sleep 2

		# Enable the reflector mirror update service
	echo -e "$CNT - Timer Services...\n"
	sudo systemctl enable reflector.timer &>>$INSTLOG
	sudo systemctl enable fstrim.timer &>>$INSTLOG
	sleep 2
fi

### Copy Config Files ###
read -n1 -rep "${CAT} - Would you like to copy config files? (y,n) " CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
	echo -e "$CNT - Copying config files..."

	# update directories
	xdg-user-dirs-update

	GITHUB="$HOME/Documents/MyGitHub"
	if [ ! -d "$GITHUB" ]; then
		mkdir -p $GITHUB
	fi

	#download github projects
	git clone https://github.com/bknightinfo/my-dots.git $HOME/Documents/MyGitHub/my-dots
	git clone https://github.com/bknightinfo/arch_scripts.git $HOME/Documents/MyGitHub/my-scripts

	# setting defaults config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/foot ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/kitty ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/gtk-3.0 ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/hypr ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/neofetch ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/nvim ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/swaylock ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/cava ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/waybar ~/.config
    ln -s $HOME/Documents/MyGitHub/my-dots/Config/wofi ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/zsh ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/Config/starship.toml ~/.config
	ln -s $HOME/Documents/MyGitHub/my-dots/.zshrc ~/

	#switch to zsh shell
	chsh -s $(which zsh)

	# stage the .desktop file
	sudo mv Extras/hyprland.desktop /usr/share/wayland-sessions/ &>>$INSTLOG

	# custom desktop files
	mkdir -p ~/.local/share/applications
	cp -r $SCRIPT_DIR/Extras/*.desktop ~/.local/share/applications &>>$INSTLOG

	SCRNSHT=~/Pictures/Screenshots
	if [ ! -d "$SCRNSHT" ]; then
		mkdir -p $SCRNSHT
	fi

	WLDIR=/usr/share/wayland-sessions
	if [ ! -d "$WLDIR" ]; then
		sudo mkdir $WLDIR
	fi

	BACKUPD=~/.local/bin/
	if [ ! -d "$BACKUPD" ]; then
		mkdir $BACKUPD
	fi

	### install custom powermenu script ###
	cp -p Extras/powermenu.py ~/.local/share/bin/powermenu
	chmod 755 ~/.local/bin/powermenu
	cp -p Extras/PowerMenu.desktop ~/.local/share/applications/PowerMenu.desktop

	### backup script ###
	cp Extras/autobackup.sh ~/.local/bin/

	#uncomment pacman settings
	sudo sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf &>>$INSTLOG
	sudo sed -i 's/^#Color/Color/' /etc/pacman.conf &>>$INSTLOG
	sudo sed -i '/^ParallelDownloads = .*/a ILoveCandy' /etc/pacman.conf &>>$INSTLOG

	# setup gtk theming
	THEMES=~/.local/share/themes/
	if [ ! -d "$THEMES" ]; then
		mkdir -p $THEMES
	fi
	git clone https://github.com/yeyushengfan258/Miya-icon-theme.git &>>$INSTLOG
	Miya-icon-theme/install.sh -black &>>$INSTLOG
	rm -rf Miya-icon-theme &>>$INSTLOG

	git clone https://github.com/Fausto-Korpsvart/Tokyo-Night-GTK-Theme.git &>>$INSTLOG
	cp -r Tokyo-Night-GTK-Theme/themes/Tokyonight-Dark-B ~/.local/share/themes/
	cp -r Tokyo-Night-GTK-Theme/themes/Tokyonight-Storm-B ~/.local/share/themes/
	rm -rf Tokyo-Night-GTK-Theme &>>$INSTLOG

	# setup the first look and feel as dark
	xfconf-query -c xsettings -p /Net/ThemeName -s "Tokyonight-Dark-B" &>>$INSTLOG
	xfconf-query -c xsettings -p /Net/IconThemeName -s "Miya-black-dark" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface gtk-theme "Tokyonight-Dark-B" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface icon-theme "Miya-black-dark" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface cursor-theme capitaine-cursors &>>$INSTLOG

	#grub theme
	sudo cp -r Extras/darkmatter /boot/grub/themes/
	FIND="#GRUB_DISABLE_OS_PROBER=false"
	REPLACE="GRUB_DISABLE_OS_PROBER=false"
	sudo sed -i "s/$FIND/$REPLACE/g" /etc/default/grub &>>$INSTLOG

	echo 'GRUB_THEME="/boot/grub/themes/darkmatter/theme.txt"' | sudo tee -a /etc/default/grub &>>$INSTLOG
	sudo grub-mkconfig -o /boot/grub/grub.cfg

	#flatpak fix
	sudo flatpak override --filesystem=xdg-data/themes

	### install nerd fonts
	mkdir -p ~/.local/share/fonts
	for font in ${nerd_fonts[@]}; do
		wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/$font.zip
		unzip $font.zip -d $HOME/.local/share/fonts/$font/
		rm $font.zip
	done
	fc-cache
fi

read -n1 -rep "${CAT} - Install backup script? [y/n] " BACKUPCRON
if [[ $BACKUPCRON == "Y" || $BACKUPCRON == "y" ]]; then
	BACKUP=~/.backups/
	if [ ! -d "$BACKUP" ]; then
		mkdir -p $BACKUP &>>$INSTLOG
	fi
	BINDIR=~/.local/share/bin
	if [ ! -d "$BINDIR" ]; then
		mkdir -p $BINDIR &>>$INSTLOG
	fi
	cat <<EOF | crontab -
30 0 * * 7 sh ~/.local/share/bin/autobackup.sh 
EOF
fi

# read -n1 -rep "${CAT} - Install dev environment(PHP development)? [y/n] " DEVAPP
# if [[ $DEVAPP == "Y" || $DEVAPP == "y" ]]; then
# 	echo -e "\n$CNT - Installing Dev applications, this may take a while..."
# 	for SOFTWR in ${development_stage[@]}; do
# 		install_software $AUR $SOFTWR
# 	done

# 	DEVDIR=~/Documents/Development/
# 	if [ ! -d "$DEVDIR" ]; then
# 		echo -e "$CWR - $DEVDIR creating folder..."
# 		mkdir -p $DEVDIR
# 	fi

# 	#phpstan -- currently not wotking in the aur
# 	wget https://github.com/phpstan/phpstan/releases/download/1.10.14/phpstan.phar
# 	sudo mkdir -p /usr/share/webapps/bin
# 	sudo cp phpstan.phar /usr/share/webapps/bin/
# 	sudo chmod 755 /usr/share/webapps/bin/phpstan.phar
# 	sudo ln -s /usr/share/webapps/bin/phpstan.phar /usr/bin/phpstan
# 	rm phpstan.phar

# 	#php coding libraries
# 	wget -O phpcbf.phar https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar
# 	chmod a+x phpcbf.phar
# 	sudo mv phpcbf.phar /usr/local/bin/phpcbf

# 	sudo sed -i 's/^;extension=mysqli/extension=mysqli/' /etc/php/php.ini &>>$INSTLOG
# 	sudo sed -i 's/^;extension=pdo_mysql/extension=pdo_mysql/' /etc/php/php.ini &>>$INSTLOG
# 	sudo sed -i 's/^;extension=iconv/extension=iconv/' /etc/php/php.ini &>>$INSTLOG

# 	~/Documents/MyGitHub/my-scripts/setup-lemp-arch.sh &>>$INSTLOG
# fi

# Remove orphan files
cd $HOME
rm .bash*
sudo pacman -Rns --noconfirm $(pacman -Qtdq)

echo "     _                   "
echo "  __| | ___  _ __   ___  "
echo " / _' |/ _ \| '_ \ / _ \ "
echo "| (_| | (_) | | | |  __/ "
echo " \__,_|\___/|_| |_|\___| "
echo "                         "
echo ""
echo "Please reboot to start hyprland. Enoy"
