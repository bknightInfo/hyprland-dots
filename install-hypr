#!/bin/bash

# ToDo - replace swwww to hyprpaper (https://github.com/hyprwm/hyprpaper)
# set some colors

CNT="[\e[1;36mNOTE\e[0m]"
COK="[\e[1;32mOK\e[0m]"
CER="[\e[1;31mERROR\e[0m]"
CAT="[\e[1;37mATTENTION\e[0m]"
CWR="[\e[1;35mWARNING\e[0m]"
CAC="[\e[1;33mACTION\e[0m]"
INSTLOG="install.log"


SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Define the software that would be installed
#system packages
install_stage=(
	brightnessctl
	cliphist
	gcc12
	grim
	gvfs
	hyprland
	mako
	os-prober
	pacman-contrib
	pamixer
	pipewire
	pavucontrol
	network-manager-applet
	sddm
	slurp
	thunar
	wget
	wireplumber
	wl-clipboard
	wofi
	xdg-user-dirs
	xdg-desktop-portal-hyprland
	xfce4-settings
	zsh
	zsh-completions
	zsh-syntax-highlighting
)

misc_stage=(
	htop
	capitaine-cursors
	exa
	file-roller
	flatpak
	polkit-gnome
    foot
	fzf
	mdcat
    noto-fonts-emoji
	playerctl
	solaar
	starship
	swayidle
	thunar-archive-plugin
	neofetch
	neovim
)

aur_stage=(
	fnm-bin
	grimblast
	nwg-look-bin
	sddm-config-editor-git
	swaync
	swaylock-effects
	swww
	waybar-hyprland-git
	wlogout
	zsh-autocomplete-git
)

remove_stage=(
	xdg-desktop-portal-gnome
	xdg-desktop-portal-gtk
)

development_stage=(
    composer
    phpactor
    prettier  
    npm
    vscodium-bin 
    vscodium-bin-marketplace
    yarn
)

# feel free to modify
flakpak_stage=(
	com.github.tchx84.Flatseal
	io.github.celluloid_player.Celluloid
	io.github.TheWisker.Cavasik
	org.filezillaproject.Filezilla
	org.gnome.Boxes
	org.gnome.Loupe
	org.mozilla.firefox
	org.libreoffice.LibreOffice
)

aur_applications=(
	brave-bin
	spotify-edge
)

nerd_fonts=( 
	CascadiaCode
	FiraCode
	JetBrainsMono
	Meslo
	Mononoki
)

for str in ${myArray[@]}; do
	echo $str
done

# clear the screen
clear

#### Check for package manager ####
ISAUR=$(command -v paru)

if [ -n "$ISAUR" ]; then
	echo -e "$COK - AUR helper was located, moving on."
	AUR="paru"
else
	echo -e "$CWR - Installing Paru"
	git clone https://aur.archlinux.org/paru-bin.git &>>$INSTLOG
	cd paru-bin &>>$INSTLOG
	makepkg -si --noconfirm &>>$INSTLOG
	cd $SCRIPT_DIR
	rm -rf paru-bin &>>$INSTLOG
	echo -e "$COK - Paru installed."
	AUR="paru"
fi

# function that will test for a package and if not found it will attempt to install it
# $1 - pacman paru or yay
# $2 - software
install_software() {
	case $1 in
	pacman)
		APP="sudo pacman"
		;;
	paru)
		APP="paru"
		;;
	esac
	if $APP -Q $2 &>>/dev/null; then
		echo -e "$COK - $2 is already installed."
	else
		# no package found so installing
		echo -e "$CNT - Now installing $2 ..."
		$APP -S --noconfirm $2 &>>$INSTLOG
		# test to make sure package installed
		if $APP -Q $2 &>>/dev/null; then
			echo -e "$COK - $2 was installed."
		else
			# if this is hit then a package is missing, exit to review log
			echo -e "$CER - $2 install had failed, please check the install.log"
			exit
		fi
	fi
}

#remove unwanted applications
remove_software() {
	if $APP -Q $1 &>>/dev/null; then
		sudo pacman -Rcns --noconfirm $1 &>>$INSTLOG
		echo -e "$COK - $1 removed."
	fi
}

### Install all of the above pacakges ####
read -n1 -rep "${CAT} - Would you like to install the packages? (y,n) " INST
if [[ $INST == "Y" || $INST == "y" ]]; then
	# Stage 1 - main components
	echo -e "$CNT - Installing main components, this may take a while..."
	for SOFTWR in ${install_stage[@]}; do
		install_software "pacman" $SOFTWR
	done

	#fix needed for waybar-hyprland
	export CC=gcc-12 CXX=g++-12

	# Stage 1 - main applications
	echo -e "$CNT - Installing misc applications, this may take a while..."
	for SOFTWR in ${misc_stage[@]}; do
		install_software "pacman" $SOFTWR
	done

	# Stage AUR - AUR applications
	echo -e "$CNT - Installing AUR system tools, this may take a while..."
	for SOFTWR in ${aur_stage[@]}; do
		install_software $AUR $SOFTWR
	done

	# Stage AUR - AUR applications
	echo -e "$CNT - Installing AUR applications, this may take a while..."
	for SOFTWR in ${aur_stage[@]}; do
		install_software $AUR $SOFTWR
	done

	# clean up files
	echo -e "$CNT - removing unwanted applications"
	for SOFTWR in ${remove_stage[@]}; do
		remove_software $SOFTWR
	done

	# Stage flatpak
	echo -e "$CNT - installing flatpak applications"
	for SOFTWR in ${flatpak_stage[@]}; do
        flatpak install flathub -y $SOFTWR 
    done

	# Enable the sddm login manager service
	echo -e "$CNT - Enabling the sddm Service..."
	sudo systemctl enable sddm -f &>>$INSTLOG
	sleep 2
fi

# BLUETOOTH
read -n1 -rep "${CAT} Would you like to install Bluetooth? (y/n)" inst4
if [[ $inst4 =~ ^[Yy]$ ]]; then
  for SOFTWR in bluez bluez-utils blueman; do
    install_software "pacman" $SOFTWR
  done
  printf " Activating Bluetooth Services...\n"
  sudo systemctl enable --now bluetooth.service &>>$INSTLOG
else
  printf "${NOTE} No bluetooth packages installed..\n"
fi

### Copy Config Files ###
read -n1 -rep "${CAT} - Would you like to copy config files? (y,n) " CFG
if [[ $CFG == "Y" || $CFG == "y" ]]; then
	echo -e "$CNT - Copying config files..."

	# update directories
	xdg-user-dirs-update

	# copy the defaults config
	cp -R Config/* ~/.config/ &>>$INSTLOG

	#copy zsh core file
	chsh -s $(which zsh)
	cp Extras/.zshrc ~/

	# stage the .desktop file
	sudo mv Extras/hyprland.desktop /usr/share/wayland-sessions/ &>>$INSTLOG

	# custom desktop files
	mkdir -p ~/.local/share/applications
	cp -r $SCRIPT_DIR/Extras/*.desktop ~/.local/share/applications &>>$INSTLOG

	SCRNSHT=~/Pictures/Screenshots
	if [ -d "$SCRNSHT" ]; then
		echo -e "$COK - $SCRNSHT found"
	else
		echo -e "$CWR - $SCRNSHT creating folder..."
		mkdir -p $SCRNSHT
	fi

	WLDIR=/usr/share/wayland-sessions
	if [ -d "$WLDIR" ]; then
		echo -e "$COK - $WLDIR found"
	else
		echo -e "$CWR - $WLDIR creating session..."
		sudo mkdir $WLDIR
	fi

	### Install the starship shell ###
	cp Extras/starship.toml ~/.config/

	#uncomment pacman settings
	sudo sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf &>>$INSTLOG
	sudo sed -i 's/^#Color/Color/' /etc/pacman.conf &>>$INSTLOG
	sudo sed -i '/^ParallelDownloads = .*/a ILoveCandy' /etc/pacman.conf &>>$INSTLOG

	#setup atronvim config
	echo -e "$CNT - Setting up AstroNvim"
	git clone --depth 1 https://github.com/AstroNvim/AstroNvim ~/.config/nvim &>>$INSTLOG
	git clone --depth 1 https://github.com/bknightInfo/astrovim_files ~/.config/nvim/lua/user &>>$INSTLOG

	# setup gtk theming
	mkdir -p ~/.local/share/themes/
	git clone https://github.com/yeyushengfan258/Miya-icon-theme.git &>>$INSTLOG
	Miya-icon-theme/install.sh -black &>>$INSTLOG
	rm -rf Miya-icon-theme &>>$INSTLOG

	git clone https://github.com/Fausto-Korpsvart/Tokyo-Night-GTK-Theme.git &>>$INSTLOG
	cp -r Tokyo-Night-GTK-Theme/themes/Tokyonight-Dark-B ~/.local/share/themes/
	cp -r Tokyo-Night-GTK-Theme/themes/Tokyonight-Storm-B ~/.local/share/themes/ 
	rm -rf Tokyo-Night-GTK-Theme &>>$INSTLOG

	# setup the first look and feel as dark
	xfconf-query -c xsettings -p /Net/ThemeName -s "Tokyonight-Dark-B" &>>$INSTLOG
	xfconf-query -c xsettings -p /Net/IconThemeName -s "Miya-black-dark" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface gtk-theme "Tokyonight-Dark-B" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface icon-theme "Miya-black-dark" &>>$INSTLOG
	gsettings set org.gnome.desktop.interface cursor-theme capitaine-cursors &>>$INSTLOG

	#grub theme
	#https://gitlab.com/VandalByte/darkmatter-grub-theme
	sudo cp -r Extras/darkmatter /boot/grub/themes/
	echo -e 'GRUB_THEME="/boot/grub/themes/darkmatter/theme.txt"' | sudo tee -a /etc/default/grub &>>$INSTLOG
	echo -e 'GRUB_DISABLE_OS_PROBER=false' | sudo tee -a /etc/default/grub &>>$INSTLOG
	sudo grub-mkconfig -o /boot/grub/grub.cfg &>>$INSTLOG
fi

### install nerd fonts
mkdir -p ~/.local/share/fonts
for font in ${nerd_fonts[@]}
do
    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/$font.zip
	unzip $font.zip -d $HOME/.local/share/fonts/$font/
    rm $font.zip
done
fc-cache

read -n1 -rep "${CAT} - Install dev environment(PHP development)? [y/n] " DEVAPP
if [[ $DEVAPP == "Y" || $DEVAPP == "y" ]]; then
	echo -e "\n$CNT - Installing Dev applications, this may take a while..."
	for SOFTWR in ${development_stage[@]}; do
		install_software $AUR $SOFTWR
	done

	DEVDIR=~/Documents/Development/
	if [ -d "$DEVDIR" ]; then
		echo -e "$COK - $DEVDIR found"
	else
		echo -e "$CWR - $DEVDIR creating folder..."
		mkdir -p $DEVDIR
	fi

	#PHP plugin
	yarn global add prettier @prettier/plugin-php

	#phpstan -- currently not wotking in the aur
	wget https://github.com/phpstan/phpstan/releases/download/1.10.14/phpstan.phar
	sudo mkdir -p /usr/share/webapps/bin
	sudo cp phpstan.phar /usr/share/webapps/bin/
	sudo chmod 755 /usr/share/webapps/bin/phpstan.phar
	sudo ln -s /usr/share/webapps/bin/phpstan.phar /usr/bin/phpstan
	rm phpstan.phar

	#php coding libraries
	wget -O phpcbf.phar https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar &>>$INSTLOG
	chmod a+x phpcbf.phar
	sudo mv phpcbf.phar /usr/local/bin/phpcbf

	sudo sed -i 's/^;extension=mysqli/extension=mysqli/' /etc/php/php.ini &>>$INSTLOG
	sudo sed -i 's/^;extension=pdo_mysql/extension=pdo_mysql/' /etc/php/php.ini &>>$INSTLOG
	sudo sed -i 's/^;extension=iconv/extension=iconv/' /etc/php/php.ini &>>$INSTLOG
fi 

# Remove orphan files
sudo pacman -Rns --noconfirm $(pacman -Qtdq)

echo -e "\n$CNT - Reboot to finish installation"
